/*
 * Alert Manager API Spec
 *
 * Alert Manager API spec. This spec represents the Alert Management service whose current objective is to prioritize the alerts based upon context.  
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@dassana.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class DassanaPolicy : IEquatable<DassanaPolicy>
    { 
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [Required]
        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Csp
        /// </summary>
        [Required]
        [DataMember(Name="csp")]
        public CSP Csp { get; set; }

        /// <summary>
        /// Gets or Sets Service
        /// </summary>
        [Required]
        [DataMember(Name="service")]
        public Service Service { get; set; }

        /// <summary>
        /// Gets or Sets ResourceType
        /// </summary>
        [DataMember(Name="resourceType")]
        public ResourceType ResourceType { get; set; }

        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [Required]
        [DataMember(Name="category")]
        public Category Category { get; set; }

        /// <summary>
        /// Gets or Sets SubCategory
        /// </summary>
        [Required]
        [DataMember(Name="subCategory")]
        public SubCategory SubCategory { get; set; }

        /// <summary>
        /// Gets or Sets Vendors
        /// </summary>
        [Required]
        [DataMember(Name="vendors")]
        public Vendors Vendors { get; set; }

        /// <summary>
        /// Gets or Sets DefaultRiskRank
        /// </summary>
        [DataMember(Name="defaultRiskRank")]
        public RiskRank DefaultRiskRank { get; set; }

        /// <summary>
        /// this object is available only if alertId was provided
        /// </summary>
        /// <value>this object is available only if alertId was provided</value>
        [DataMember(Name="alertDetails")]
        public Object AlertDetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DassanaPolicy {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Csp: ").Append(Csp).Append("\n");
            sb.Append("  Service: ").Append(Service).Append("\n");
            sb.Append("  ResourceType: ").Append(ResourceType).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  SubCategory: ").Append(SubCategory).Append("\n");
            sb.Append("  Vendors: ").Append(Vendors).Append("\n");
            sb.Append("  DefaultRiskRank: ").Append(DefaultRiskRank).Append("\n");
            sb.Append("  AlertDetails: ").Append(AlertDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((DassanaPolicy)obj);
        }

        /// <summary>
        /// Returns true if DassanaPolicy instances are equal
        /// </summary>
        /// <param name="other">Instance of DassanaPolicy to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DassanaPolicy other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Csp == other.Csp ||
                    Csp != null &&
                    Csp.Equals(other.Csp)
                ) && 
                (
                    Service == other.Service ||
                    Service != null &&
                    Service.Equals(other.Service)
                ) && 
                (
                    ResourceType == other.ResourceType ||
                    ResourceType != null &&
                    ResourceType.Equals(other.ResourceType)
                ) && 
                (
                    Category == other.Category ||
                    Category != null &&
                    Category.Equals(other.Category)
                ) && 
                (
                    SubCategory == other.SubCategory ||
                    SubCategory != null &&
                    SubCategory.Equals(other.SubCategory)
                ) && 
                (
                    Vendors == other.Vendors ||
                    Vendors != null &&
                    Vendors.Equals(other.Vendors)
                ) && 
                (
                    DefaultRiskRank == other.DefaultRiskRank ||
                    DefaultRiskRank != null &&
                    DefaultRiskRank.Equals(other.DefaultRiskRank)
                ) && 
                (
                    AlertDetails == other.AlertDetails ||
                    AlertDetails != null &&
                    AlertDetails.Equals(other.AlertDetails)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Csp != null)
                    hashCode = hashCode * 59 + Csp.GetHashCode();
                    if (Service != null)
                    hashCode = hashCode * 59 + Service.GetHashCode();
                    if (ResourceType != null)
                    hashCode = hashCode * 59 + ResourceType.GetHashCode();
                    if (Category != null)
                    hashCode = hashCode * 59 + Category.GetHashCode();
                    if (SubCategory != null)
                    hashCode = hashCode * 59 + SubCategory.GetHashCode();
                    if (Vendors != null)
                    hashCode = hashCode * 59 + Vendors.GetHashCode();
                    if (DefaultRiskRank != null)
                    hashCode = hashCode * 59 + DefaultRiskRank.GetHashCode();
                    if (AlertDetails != null)
                    hashCode = hashCode * 59 + AlertDetails.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(DassanaPolicy left, DassanaPolicy right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DassanaPolicy left, DassanaPolicy right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
