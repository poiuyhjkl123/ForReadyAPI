/*
 * Alert Manager API Spec
 *
 * Alert Manager API spec. This spec represents the Alert Management service whose current objective is to prioritize the alerts based upon context.  
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@dassana.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class FilterSuggestions : IEquatable<FilterSuggestions>
    { 
        /// <summary>
        /// Gets or Sets Key
        /// </summary>
        [DataMember(Name="key")]
        public string Key { get; set; }

        /// <summary>
        /// Gets or Sets Operator
        /// </summary>
        [DataMember(Name="operator")]
        public string Operator { get; set; }

        /// <summary>
        /// Gets or Sets Search
        /// </summary>
        [DataMember(Name="search")]
        public string Search { get; set; }

        /// <summary>
        /// Gets or Sets TeamId
        /// </summary>
        [DataMember(Name="teamId")]
        public Guid? TeamId { get; set; }

        /// <summary>
        /// Gets or Sets Filters
        /// </summary>
        [DataMember(Name="filters")]
        public Filters Filters { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FilterSuggestions {\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Operator: ").Append(Operator).Append("\n");
            sb.Append("  Search: ").Append(Search).Append("\n");
            sb.Append("  TeamId: ").Append(TeamId).Append("\n");
            sb.Append("  Filters: ").Append(Filters).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FilterSuggestions)obj);
        }

        /// <summary>
        /// Returns true if FilterSuggestions instances are equal
        /// </summary>
        /// <param name="other">Instance of FilterSuggestions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FilterSuggestions other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Key == other.Key ||
                    Key != null &&
                    Key.Equals(other.Key)
                ) && 
                (
                    Operator == other.Operator ||
                    Operator != null &&
                    Operator.Equals(other.Operator)
                ) && 
                (
                    Search == other.Search ||
                    Search != null &&
                    Search.Equals(other.Search)
                ) && 
                (
                    TeamId == other.TeamId ||
                    TeamId != null &&
                    TeamId.Equals(other.TeamId)
                ) && 
                (
                    Filters == other.Filters ||
                    Filters != null &&
                    Filters.Equals(other.Filters)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Key != null)
                    hashCode = hashCode * 59 + Key.GetHashCode();
                    if (Operator != null)
                    hashCode = hashCode * 59 + Operator.GetHashCode();
                    if (Search != null)
                    hashCode = hashCode * 59 + Search.GetHashCode();
                    if (TeamId != null)
                    hashCode = hashCode * 59 + TeamId.GetHashCode();
                    if (Filters != null)
                    hashCode = hashCode * 59 + Filters.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FilterSuggestions left, FilterSuggestions right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FilterSuggestions left, FilterSuggestions right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
